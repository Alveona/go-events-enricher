// Code generated by MockGen. DO NOT EDIT.
// Source: events.go

// Package events is a generated GoMock package.
package events

import (
	context "context"
	reflect "reflect"

	entities "github.com/Alveona/go-events-enricher/app/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockclickhouseStorage is a mock of clickhouseStorage interface.
type MockclickhouseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockclickhouseStorageMockRecorder
}

// MockclickhouseStorageMockRecorder is the mock recorder for MockclickhouseStorage.
type MockclickhouseStorageMockRecorder struct {
	mock *MockclickhouseStorage
}

// NewMockclickhouseStorage creates a new mock instance.
func NewMockclickhouseStorage(ctrl *gomock.Controller) *MockclickhouseStorage {
	mock := &MockclickhouseStorage{ctrl: ctrl}
	mock.recorder = &MockclickhouseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclickhouseStorage) EXPECT() *MockclickhouseStorageMockRecorder {
	return m.recorder
}

// ProcessInsertEvents mocks base method.
func (m *MockclickhouseStorage) ProcessInsertEvents(ctx context.Context, events []*entities.EventDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessInsertEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessInsertEvents indicates an expected call of ProcessInsertEvents.
func (mr *MockclickhouseStorageMockRecorder) ProcessInsertEvents(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessInsertEvents", reflect.TypeOf((*MockclickhouseStorage)(nil).ProcessInsertEvents), ctx, events)
}

// MockprocessorMetrics is a mock of processorMetrics interface.
type MockprocessorMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockprocessorMetricsMockRecorder
}

// MockprocessorMetricsMockRecorder is the mock recorder for MockprocessorMetrics.
type MockprocessorMetricsMockRecorder struct {
	mock *MockprocessorMetrics
}

// NewMockprocessorMetrics creates a new mock instance.
func NewMockprocessorMetrics(ctrl *gomock.Controller) *MockprocessorMetrics {
	mock := &MockprocessorMetrics{ctrl: ctrl}
	mock.recorder = &MockprocessorMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprocessorMetrics) EXPECT() *MockprocessorMetricsMockRecorder {
	return m.recorder
}

// OSInc mocks base method.
func (m *MockprocessorMetrics) OSInc(os string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OSInc", os)
}

// OSInc indicates an expected call of OSInc.
func (mr *MockprocessorMetricsMockRecorder) OSInc(os interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSInc", reflect.TypeOf((*MockprocessorMetrics)(nil).OSInc), os)
}

// TypesInc mocks base method.
func (m *MockprocessorMetrics) TypesInc(eventType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TypesInc", eventType)
}

// TypesInc indicates an expected call of TypesInc.
func (mr *MockprocessorMetricsMockRecorder) TypesInc(eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TypesInc", reflect.TypeOf((*MockprocessorMetrics)(nil).TypesInc), eventType)
}
