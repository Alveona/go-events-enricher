// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Alveona/go-events-enricher/app/generated/models"
)

// ProduceEventsOKCode is the HTTP code returned for type ProduceEventsOK
const ProduceEventsOKCode int = 200

/*ProduceEventsOK Success

swagger:response produceEventsOK
*/
type ProduceEventsOK struct {

	/*
	  In: Body
	*/
	Payload *models.ProduceEventsResponse `json:"body,omitempty"`
}

// NewProduceEventsOK creates ProduceEventsOK with default headers values
func NewProduceEventsOK() *ProduceEventsOK {

	return &ProduceEventsOK{}
}

// WithPayload adds the payload to the produce events o k response
func (o *ProduceEventsOK) WithPayload(payload *models.ProduceEventsResponse) *ProduceEventsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the produce events o k response
func (o *ProduceEventsOK) SetPayload(payload *models.ProduceEventsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProduceEventsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProduceEventsUnprocessableEntityCode is the HTTP code returned for type ProduceEventsUnprocessableEntity
const ProduceEventsUnprocessableEntityCode int = 422

/*ProduceEventsUnprocessableEntity Unprocessable Entity

swagger:response produceEventsUnprocessableEntity
*/
type ProduceEventsUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewProduceEventsUnprocessableEntity creates ProduceEventsUnprocessableEntity with default headers values
func NewProduceEventsUnprocessableEntity() *ProduceEventsUnprocessableEntity {

	return &ProduceEventsUnprocessableEntity{}
}

// WithPayload adds the payload to the produce events unprocessable entity response
func (o *ProduceEventsUnprocessableEntity) WithPayload(payload *models.Error) *ProduceEventsUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the produce events unprocessable entity response
func (o *ProduceEventsUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProduceEventsUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProduceEventsInternalServerErrorCode is the HTTP code returned for type ProduceEventsInternalServerError
const ProduceEventsInternalServerErrorCode int = 500

/*ProduceEventsInternalServerError Internal Server Error

swagger:response produceEventsInternalServerError
*/
type ProduceEventsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewProduceEventsInternalServerError creates ProduceEventsInternalServerError with default headers values
func NewProduceEventsInternalServerError() *ProduceEventsInternalServerError {

	return &ProduceEventsInternalServerError{}
}

// WithPayload adds the payload to the produce events internal server error response
func (o *ProduceEventsInternalServerError) WithPayload(payload *models.Error) *ProduceEventsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the produce events internal server error response
func (o *ProduceEventsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProduceEventsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
